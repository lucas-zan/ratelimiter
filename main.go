package main

import (
	"flag"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/your-org/rate-limiter/config"
	_ "github.com/your-org/rate-limiter/docs" // This is generated by swag
	"github.com/your-org/rate-limiter/handler"
	"github.com/your-org/rate-limiter/logger"
	"github.com/your-org/rate-limiter/redis"
)

// @title           Rate Limiter Service API
// @version         1.0
// @description     A rate limiting service based on Go and Redis, supporting token bucket algorithm with flexible rate limiting rule configuration and monitoring capabilities.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  MIT
// @license.url   https://opensource.org/licenses/MIT

// @host      localhost:8080
// @BasePath  /

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
// @description API key for authentication

func main() {
	// Parse command line arguments
	configPath := flag.String("config", "config.yaml", "Configuration file path")
	flag.Parse()

	// Load configuration
	if err := config.LoadConfig(*configPath); err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Initialize logging system
	if err := logger.InitLogger(&config.GlobalConfig.Log); err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer logger.Sync()

	logger.Info("Starting Rate Limiter Service",
		logger.String("version", "1.0.0"),
		logger.String("config_file", *configPath),
	)

	// Log configuration information
	logger.Info("Configuration loaded",
		logger.String("server_port", config.GlobalConfig.Server.Port),
		logger.String("redis_addr", config.GlobalConfig.Redis.Addr),
		logger.Int64("default_rate", config.GlobalConfig.Limiter.DefaultRate),
		logger.Int64("default_burst", config.GlobalConfig.Limiter.DefaultBurst),
		logger.String("log_level", config.GlobalConfig.Log.Level),
		logger.String("log_output", config.GlobalConfig.Log.Output),
	)

	// Initialize Redis connection
	logger.Info("Initializing Redis connection")
	if err := redis.Init(&config.GlobalConfig.Redis); err != nil {
		logger.Fatal("Failed to initialize Redis", logger.ErrorField(err))
	}
	defer func() {
		logger.Info("Closing Redis connection")
		if err := redis.Close(); err != nil {
			logger.Error("Failed to close Redis connection", logger.ErrorField(err))
		}
	}()

	// Set Gin mode
	gin.SetMode(gin.ReleaseMode)

	// Create router
	r := gin.Default()

	// Add middleware
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	// 支持 CORS
	r.Use(func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE, UPDATE")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Origin, Content-Type, Accept, Authorization")
		c.Writer.Header().Set("Access-Control-Expose-Headers", "Content-Length, Content-Type")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}
		c.Next()
	})

	// Setup routes
	setupRoutes(r)

	// Start server
	go func() {
		logger.Info("Server starting", logger.String("port", config.GlobalConfig.Server.Port))
		if err := r.Run(config.GlobalConfig.Server.Port); err != nil {
			logger.Fatal("Failed to start server", logger.ErrorField(err))
		}
	}()

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("Shutting down server...")
}

func setupRoutes(r *gin.Engine) {
	logger.Info("Setting up routes")

	// API v1 route group
	v1 := r.Group("/v1")
	{
		// Check rate limit
		v1.POST("/check_rate_limit", handler.CheckRateLimit)
		logger.Debug("Registered route", logger.String("method", "POST"), logger.String("path", "/v1/check_rate_limit"))

		// Update rate limiting rule
		v1.POST("/update_rule", handler.UpdateRule)
		logger.Debug("Registered route", logger.String("method", "POST"), logger.String("path", "/v1/update_rule"))

		// Get monitoring statistics
		v1.GET("/stats", handler.GetStats)
		logger.Debug("Registered route", logger.String("method", "GET"), logger.String("path", "/v1/stats"))

		// Get specific rule statistics
		v1.GET("/rule_stats", handler.GetRuleStats)
		logger.Debug("Registered route", logger.String("method", "GET"), logger.String("path", "/v1/rule_stats"))
	}

	// Health check
	r.GET("/health", func(c *gin.Context) {
		logger.Debug("Health check request", logger.String("client_ip", c.ClientIP()))
		c.JSON(200, gin.H{
			"status":  "ok",
			"service": "rate-limiter",
		})
	})
	logger.Debug("Registered route", logger.String("method", "GET"), logger.String("path", "/health"))

	// Swagger documentation
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	logger.Debug("Registered route", logger.String("method", "GET"), logger.String("path", "/swagger/*any"))

	// API documentation
	r.GET("/", func(c *gin.Context) {
		logger.Debug("API documentation request", logger.String("client_ip", c.ClientIP()))
		c.JSON(200, gin.H{
			"service": "Rate Limiter Service",
			"version": "1.0.0",
			"endpoints": gin.H{
				"POST /v1/check_rate_limit": "Check if rate limit is exceeded (returns allowed status and remaining tokens)",
				"POST /v1/update_rule":      "Update rate limiting rule",
				"GET /v1/stats":             "Get all monitoring statistics",
				"GET /v1/rule_stats":        "Get specific rule statistics",
				"GET /health":               "Health check",
				"GET /swagger/index.html":   "Swagger API documentation",
			},
		})
	})
	logger.Debug("Registered route", logger.String("method", "GET"), logger.String("path", "/"))

	logger.Info("Routes setup completed")
}
